---
import MobileMenuToggle from 'virtual:starlight/components/MobileMenuToggle';
import type { Props } from '../props';

const { hasSidebar, labels } = Astro.props;
---

<script>
!function(t,e){
    // Change from `this` to `window` to explicitly set it on the global object
    "object"==typeof exports ? module.exports=e(window,document) : window.SimpleScrollbar=e(window,document);
}(this,function(t,e){
    function s(t){
        Object.prototype.hasOwnProperty.call(t,"data-simple-scrollbar")||Object.defineProperty(t,"data-simple-scrollbar",{value:new o(t)})
    }
    function i(t,s){
        function i(t){
            var e=t.pageY-a;
            a=t.pageY,n(function(){
                s.el.scrollTop+=e/s.scrollRatio
            })
        }
        function r(){
            t.classList.remove("ss-grabbed"),e.body.classList.remove("ss-grabbed"),e.removeEventListener("mousemove",i),e.removeEventListener("mouseup",r)
        }
        var a;
        t.addEventListener("mousedown",function(s){
            return a=s.pageY,t.classList.add("ss-grabbed"),e.body.classList.add("ss-grabbed"),e.addEventListener("mousemove",i),e.addEventListener("mouseup",r),!1
        })
    }
    function r(t){
        for(this.target=t,this.direction=window.getComputedStyle(this.target).direction,this.bar='<div class="ss-scroll">',this.wrapper=e.createElement("div"),this.wrapper.setAttribute("class","ss-wrapper"),this.el=e.createElement("div"),this.el.setAttribute("class","ss-content"),"rtl"===this.direction&&this.el.classList.add("rtl"),this.wrapper.appendChild(this.el);this.target.firstChild;)this.el.appendChild(this.target.firstChild);
        this.target.appendChild(this.wrapper),this.target.insertAdjacentHTML("beforeend",this.bar),this.bar=this.target.lastChild,i(this.bar,this),this.moveBar(),this.el.addEventListener("scroll",this.moveBar.bind(this)),this.el.addEventListener("mouseenter",this.moveBar.bind(this)),this.target.classList.add("ss-container");
        var s=window.getComputedStyle(t);
        "0px"===s.height&&"0px"!==s["max-height"]&&(t.style.height=s["max-height"])
    }
    function a(){
        for(var t=e.querySelectorAll("*[ss-container]"),i=0;i<t.length;i++)s(t[i])
    }
    var n=t.requestAnimationFrame||t.setImmediate||function(t){return setTimeout(t,0)};
    r.prototype={
        moveBar:function(t){
            var e=this.el.scrollHeight,s=this.el.clientHeight,i=this;
            this.scrollRatio=s/e;
            var r="rtl"===i.direction,a=r?i.target.clientWidth-i.bar.clientWidth+18:-1*(i.target.clientWidth-i.bar.clientWidth);
            n(function(){
                i.scrollRatio>=1?i.bar.classList.add("ss-hidden"):(i.bar.classList.remove("ss-hidden"),i.bar.style.cssText="height:"+Math.max(100*i.scrollRatio,10)+"%; top:"+i.el.scrollTop/e*100+"%;right:"+a+"px;")
            })
        }
    },
    e.addEventListener("DOMContentLoaded",a),r.initEl=s,r.initAll=a;
    var o=r;
    return o;
});
</script>

<div class="page sl-flex">
	<header class="header"><slot name="header" /></header>
	<div class="overlay" />
	{
		hasSidebar && (
			<nav class="sidebar" aria-label={labels['sidebarNav.accessibleLabel']}>
				<MobileMenuToggle {...Astro.props} />
				<div id="starlight__sidebar" ss-container class="sidebar-pane">
					<div class="sidebar-content sl-flex">
						<slot name="sidebar" />
					</div>
				</div>
			</nav>
		)
	}
	<div class="main-frame"><slot /></div>
</div>

<style>
	.page {
		flex-direction: column;
		min-height: 100svh;
        overflow-x: hidden;
	}

	.header {
		z-index: var(--sl-z-index-navbar);
		height: var(--sl-nav-height);
		position: fixed;
		width: 95%;
		/* border-bottom: 1px solid var(--sl-color-hairline-shade);
		padding: var(--sl-nav-pad-y) var(--sl-nav-pad-x);
		padding-inline-end: var(--sl-nav-pad-x); */
		background-color: var(--sl-color-bg-nav);

        padding: 16px 22px 16px 22px;
        margin: 2rem;
        border-radius: 100px;
	}

	/* :global([data-has-sidebar]) .header {
		padding-inline-end: calc(var(--sl-nav-gap) + var(--sl-nav-pad-x) + var(--sl-menu-button-size));
	} */

	.sidebar-pane {
		visibility: var(--sl-sidebar-visibility, hidden);
		position: fixed;
		z-index: var(--sl-z-index-menu);
		inset-block: var(--sl-nav-height) 0;
		inset-inline-start: 0;
		width: 100%;
		background-color: var(--sl-color-black);
		overflow-y: auto;
		margin-top: 4.5rem;
		border-top-right-radius: 1rem;
	}

	:global([aria-expanded='true']) ~ .sidebar-pane {
		--sl-sidebar-visibility: visible;
	}

	.sidebar-content {
		height: 100%;
		min-height: max-content;
		padding: 1rem var(--sl-sidebar-pad-x) 0;
		flex-direction: column;
		gap: 1rem;
	}

	@media (min-width: 50rem) {
		.sidebar-content::after {
			content: '';
			padding-bottom: 1px;
		}
	}

	.main-frame {
		padding-top: calc(var(--sl-nav-height) + var(--sl-mobile-toc-height)); 
		padding-inline-start: var(--sl-content-inline-start);
		overflow: hidden;
		margin: 2rem;
	}



	.overlay {
		height: calc(var(--sl-nav-height) + var(--sl-mobile-toc-height) + 30px); 
		z-index: 5;
		position: fixed;;
		background-color: var(--default-color); 
		width: 100%; 
	}


	@media (min-width: 50rem) {
		:global([data-has-sidebar]) .header {
			padding-inline-end: var(--sl-nav-pad-x);
		}
		.sidebar-pane {
			--sl-sidebar-visibility: visible;
			width: var(--sl-sidebar-width);
			background-color: var(--sl-color-bg-sidebar);
		}
	}
</style>